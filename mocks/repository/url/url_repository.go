// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/muhammadheryan/url-shortner-base62/model"
	mock "github.com/stretchr/testify/mock"
)

// URLRepository is an autogenerated mock type for the URLRepository type
type URLRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *URLRepository) Create(ctx context.Context, req *model.URLEntity) (*model.URLEntity, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.URLEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.URLEntity) (*model.URLEntity, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.URLEntity) *model.URLEntity); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.URLEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.URLEntity) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, filter
func (_m *URLRepository) Get(ctx context.Context, filter *model.URLFilter) (*model.URLEntity, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.URLEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.URLFilter) (*model.URLEntity, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.URLFilter) *model.URLEntity); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.URLEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.URLFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, req
func (_m *URLRepository) Update(ctx context.Context, req *model.URLEntity) (*model.URLEntity, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.URLEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.URLEntity) (*model.URLEntity, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.URLEntity) *model.URLEntity); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.URLEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.URLEntity) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewURLRepository creates a new instance of URLRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewURLRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *URLRepository {
	mock := &URLRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
